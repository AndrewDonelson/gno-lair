# persist Package Documentation

The `persist` package provides a simple in-memory key-value store called `Bucket`. Each `Bucket` instance can store a predefined number of items with keys of type uuid.UUID. The package uses a map to store data and sync.RWMutex to ensure concurrent access safety.

## Summary

`Bucket` is a simple in-memory key-value store that can store any Go data type using `encoding/gob`. The keys are of type `uuid.UUID`. The bucket has a name and a maximum size, both of which can be modified after creation. If the maximum size is not provided or is less than or equal to 0, it is set to the maximum possible int64 value. If a name is not provided, a random name is generated by appending a random number to the string "bucket".

## Methods

The following methods are available for a Bucket:

- NewBucket(name string, maxSize int64) *Bucket: Creates a new Bucket instance with the specified name and maximum size.
- Size() int64: Returns the number of items in the Bucket.
- MaxSize() int64: Returns the maximum number of items the Bucket can hold.
- Name() string: Returns the name of the Bucket.
- SetMaxSize(maxSize int64): Sets the maximum number of items the Bucket can hold.
- SetName(name string): Sets the name of the Bucket.
- Set(key uuid.UUID, value interface{}) error: Stores a value in the Bucket with the specified key.
- Get(key uuid.UUID, target interface{}) error: Retrieves a value from the Bucket by the specified key, storing it in the provided target.

## Usage

Creating a new Bucket

```go
import (
	"github.com/google/uuid"
	"github.com/yourusername/yourproject/persist"
)

// Create a new Bucket with a name and maximum size
bucket := persist.NewBucket("my-bucket", 100)
```

## Setting and Getting Values

```go
// Generate a UUID for the key
key := uuid.New()

// Set a value
err := bucket.Set(key, "Hello, World!")
if err != nil {
    fmt.Println("Error setting value:", err)
}

// Get the value
var retrievedValue string
err = bucket.Get(key, &retrievedValue)
if err != nil {
    fmt.Println("Error getting value:", err)
} else {
    fmt.Println("Retrieved value:", retrievedValue)
}
```

## Getting and Setting Bucket Properties

```go
// Get the name of the bucket
name := bucket.Name()

// Set the name of the bucket
bucket.SetName("new-bucket-name")

// Get the current size (number of items) of the bucket
size := bucket.Size()

// Get the maximum size of the bucket
maxSize := bucket.MaxSize()

// Set the maximum size of the bucket
bucket.SetMaxSize(200)
```
